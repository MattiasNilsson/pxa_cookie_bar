plugin.tx_pxacookiebar {
    view {
        templateRootPaths {
            10 = {$plugin.tx_pxacookiebar.view.templateRootPath}
        }

        partialRootPaths {
            10 = {$plugin.tx_pxacookiebar.view.partialRootPath}
        }

        layoutRootPaths {
            10 = {$plugin.tx_pxacookiebar.view.layoutRootPath}
        }
    }

    features {
        # uncomment the following line to enable the new Property Mapper.
        # rewrittenPropertyMapper = 1
    }

    settings {

    }
}

page.includeJSFooter.cookieWarning = EXT:pxa_cookie_bar/Resources/Public/Js/pxa_cookie_warning.js
page.includeCSS.cookieWarning = EXT:pxa_cookie_bar/Resources/Public/Css/bar.css

page.11905 = USER
page.11905 {
    userFunc = TYPO3\CMS\Extbase\Core\Bootstrap->run
    extensionName = PxaCookieBar
    pluginName = Pxacookiebar
    vendorName = Pixelant
}

# options
page.headerData.86 = COA
page.headerData.86 {
    # helper options
    5 = TEXT
    5.value (
setDocumentClass : function(className) {
    document.documentElement.className += (document.documentElement.className == "" ? "":" ") + className;
},
    )
    10 = TEXT
    10 {
        typolink {
            parameter.data = leveluid:0
            additionalParams = &type=314638125&tx_pxacookiebar_pxacookiebar[action]=closeWarning
            useCacheHash = 1
            forceAbsoluteUrl = 1
            returnLast = url
        }

        wrap = cookieCloseUrl:"|",
    }

    20 < .10
    20 {
        typolink.additionalParams = &type=314638125&tx_pxacookiebar_pxacookiebar[action]=warning
        wrap = cookieBarUrl:"|",
    }

    30 = TEXT
    30 {
        value (
getCookie : function(c_name) {
	var i, x, y, ARRcookies = document.cookie.split(";");
	for (i = 0; i < ARRcookies.length; i++) {
		x = ARRcookies[i].substr(0, ARRcookies[i].indexOf("="));
		y = ARRcookies[i].substr(ARRcookies[i].indexOf("=") + 1);
		x = x.replace(/^\s+|\s+$/g, "");
		if (x == c_name) {
			return unescape(y) == '1';
		}
	}

	return false;
},
        )
    }

    wrap = <script>var PxaCookieWarningHelper = {|};PxaCookieWarningHelper['cookieIsSet']=PxaCookieWarningHelper.getCookie('pxa_cookie_warning');if(!PxaCookieWarningHelper['cookieIsSet'] && PxaCookieWarningHelper['disableAjaxLoading']) {PxaCookieWarningHelper.setDocumentClass("visible-cookie-warning");}</script>
}

[globalVar = LIT:1 = {$plugin.tx_pxacookiebar.settings.disableAjaxLoading}]
    page.headerData.86 {
        35 = TEXT
        35.value = disableAjaxLoading: true,
    }

    page {
        {$plugin.tx_pxacookiebar.settings.prepantTo} {
            stdWrap.prepend = COA
            stdWrap.prepend {
                10 < cookieWarning.5
                10 {
                    settings {
                        forceCookieWarningRender = 1
                    }
                }
            }
        }
    }

    plugin.tx_pxacookiebar._CSS_DEFAULT_STYLE (
        #pxa-cookie-mess{display:none;}.visible-cookie-warning #pxa-cookie-mess{display: block;}
    )
[else]
    page.headerData.86 {
        35 = TEXT
        35.value = disableAjaxLoading: false,
    }

[globalVar = LIT:1 = {$plugin.tx_pxacookiebar.settings.disableCookies}]
    # disallow JS to SetCookie, should be on top of the page
    page.headerData.86 {
        40 = TEXT
        40 {
            value (
pxaPreventJsFromSettingCookies: function() {
	if(!document.__defineGetter__) {
    	Object.defineProperty(document, 'cookie', {
			get: function(){return '';},
            set: function(){return true}
        });
	} else {
        document.__defineGetter__("cookie", function() {return '';} );
        document.__defineSetter__("cookie", function() {} );
    }
},
            )
        }

        50 = TEXT
        50.value = isActiveConsent: true,

        wrap (
<script>var PxaCookieWarningHelper = {|};
PxaCookieWarningHelper['cookieIsSet']=PxaCookieWarningHelper.getCookie('pxa_cookie_warning');
if(!PxaCookieWarningHelper['cookieIsSet']) {PxaCookieWarningHelper.pxaPreventJsFromSettingCookies();}
if(!PxaCookieWarningHelper['cookieIsSet'] && PxaCookieWarningHelper['disableAjaxLoading']) {PxaCookieWarningHelper.setDocumentClass("visible-cookie-warning");}
</script>
        )
    }
[else]
    page.headerData.86 {
        50 = TEXT
        50.value = isActiveConsent: false,
    }
[globalVar = LIT:bottomFix = {$plugin.tx_pxacookiebar.settings.position}]
    plugin.tx_pxacookiebar.settings.wrapperClasses = bottom-message-wrap
[else]
    plugin.tx_pxacookiebar.settings.wrapperClasses = top-message-wrap
[global]